{"version":3,"file":"terra-draw-google-maps-adapter.module.js","sources":["../src/terra-draw-google-maps-adapter.ts"],"sourcesContent":["/**\n * @module terra-draw-google-maps-adapter\n */\nimport {\n\tTerraDrawChanges,\n\tSetCursor,\n\tTerraDrawStylingFunction,\n\tTerraDrawExtend,\n} from \"terra-draw\";\nimport { GeoJsonObject } from \"geojson\";\n\nexport class TerraDrawGoogleMapsAdapter extends TerraDrawExtend.TerraDrawBaseAdapter {\n\tconstructor(\n\t\tconfig: {\n\t\t\tlib: typeof google.maps;\n\t\t\tmap: google.maps.Map;\n\t\t} & TerraDrawExtend.BaseAdapterConfig,\n\t) {\n\t\tsuper(config);\n\t\tthis._lib = config.lib;\n\t\tthis._map = config.map;\n\n\t\tthis._coordinatePrecision =\n\t\t\ttypeof config.coordinatePrecision === \"number\"\n\t\t\t\t? config.coordinatePrecision\n\t\t\t\t: 9;\n\t}\n\n\tprivate _cursor: string | undefined;\n\tprivate _cursorStyleSheet: HTMLStyleElement | undefined;\n\tprivate _lib: typeof google.maps;\n\tprivate _map: google.maps.Map;\n\tprivate _overlay: google.maps.OverlayView | undefined;\n\tprivate _clickEventListener: google.maps.MapsEventListener | undefined;\n\tprivate _mouseMoveEventListener: google.maps.MapsEventListener | undefined;\n\tprivate _readyCalled = false;\n\n\tprivate get _layers(): boolean {\n\t\treturn Boolean(this.renderedFeatureIds?.size > 0);\n\t}\n\n\t/**\n\t * Generates an SVG path string for a circle with the given center coordinates and radius.\n\t * Based off this StackOverflow answer: https://stackoverflow.com/a/27905268/1363484\n\t * @param cx The x-coordinate of the circle's center.\n\t * @param cy The y-coordinate of the circle's center.\n\t * @param r The radius of the circle.\n\t * @returns The SVG path string representing the circle.\n\t */\n\tprivate circlePath(cx: number, cy: number, r: number) {\n\t\tconst d = r * 2;\n\t\treturn `M ${cx} ${cy} m -${r}, 0 a ${r},${r} 0 1,0 ${d},0 a ${r},${r} 0 1,0 -${d},0`;\n\t}\n\n\tpublic register(callbacks: TerraDrawExtend.TerraDrawCallbacks) {\n\t\tsuper.register(callbacks);\n\n\t\t// The overlay is responsible for allow us to\n\t\t// get the projection, which in turn allows us to\n\t\t// go through lng/lat to pixel space and vice versa\n\t\tthis._overlay = new this._lib.OverlayView();\n\t\tthis._overlay.draw = function () {\n\t\t\t// No-op\n\t\t};\n\n\t\t// Unfortunately it is only ready after the onAdd\n\t\t// method is called, which is why we need to use the 'ready'\n\t\t// listener with the Google Maps adapter\n\t\tthis._overlay.onAdd = () => {\n\t\t\tif (this._currentModeCallbacks?.onReady && !this._readyCalled) {\n\t\t\t\tthis._currentModeCallbacks.onReady();\n\t\t\t\tthis._readyCalled = true;\n\t\t\t}\n\t\t};\n\t\tthis._overlay.setMap(this._map);\n\n\t\t// Required to avoid runtime error in Google Maps API\n\t\tthis._overlay.onRemove = () => {\n\t\t\t// No-op\n\t\t};\n\n\t\t// Clicking on data geometries triggers\n\t\t// swallows the map onclick event,\n\t\t// so we need to forward it to the click callback handler\n\t\tthis._clickEventListener = this._map.data.addListener(\n\t\t\t\"click\",\n\t\t\t(\n\t\t\t\tevent: google.maps.MapMouseEvent & {\n\t\t\t\t\tdomEvent: MouseEvent;\n\t\t\t\t},\n\t\t\t) => {\n\t\t\t\tconst clickListener = this._listeners.find(\n\t\t\t\t\t({ name }) => name === \"click\",\n\t\t\t\t);\n\t\t\t\tif (clickListener) {\n\t\t\t\t\tclickListener.callback(event);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\n\t\tthis._mouseMoveEventListener = this._map.data.addListener(\n\t\t\t\"mousemove\",\n\t\t\t(\n\t\t\t\tevent: google.maps.MapMouseEvent & {\n\t\t\t\t\tdomEvent: MouseEvent;\n\t\t\t\t},\n\t\t\t) => {\n\t\t\t\tconst mouseMoveListener = this._listeners.find(\n\t\t\t\t\t({ name }) => name === \"mousemove\",\n\t\t\t\t);\n\t\t\t\tif (mouseMoveListener) {\n\t\t\t\t\tmouseMoveListener.callback(event);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t}\n\n\tpublic unregister(): void {\n\t\tsuper.unregister();\n\t\tthis._clickEventListener?.remove();\n\t\tthis._mouseMoveEventListener?.remove();\n\n\t\tif (this._overlay && this._overlay.getMap()) {\n\t\t\tthis._overlay.setMap(null);\n\t\t}\n\t\tthis._overlay = undefined;\n\t\tthis._readyCalled = false;\n\t}\n\n\t/**\n\t * Returns the longitude and latitude coordinates from a given PointerEvent on the map.\n\t * @param event The PointerEvent or MouseEvent containing the screen coordinates of the pointer.\n\t * @returns An object with 'lng' and 'lat' properties representing the longitude and latitude, or null if the conversion is not possible.\n\t */\n\tgetLngLatFromEvent(event: PointerEvent | MouseEvent) {\n\t\tif (!this._overlay) {\n\t\t\tthrow new Error(\"cannot get overlay\");\n\t\t}\n\n\t\tconst bounds = this._map.getBounds();\n\n\t\tif (!bounds) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst ne = bounds.getNorthEast();\n\t\tconst sw = bounds.getSouthWest();\n\t\tconst latLngBounds = new this._lib.LatLngBounds(sw, ne);\n\n\t\tconst mapCanvas = this._map.getDiv();\n\t\tconst offsetX = event.clientX - mapCanvas.getBoundingClientRect().left;\n\t\tconst offsetY = event.clientY - mapCanvas.getBoundingClientRect().top;\n\t\tconst screenCoord = new this._lib.Point(offsetX, offsetY);\n\n\t\tconst projection = this._overlay.getProjection();\n\t\tif (!projection) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst latLng = projection.fromContainerPixelToLatLng(screenCoord);\n\n\t\tif (latLng && latLngBounds.contains(latLng)) {\n\t\t\treturn { lng: latLng.lng(), lat: latLng.lat() };\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the HTML element of the Google Map element that handles interaction events\n\t * @returns The HTMLElement representing the map container.\n\t */\n\tpublic getMapEventElement() {\n\t\t// TODO: This is a bit hacky, maybe there is a better solution here\n\t\tconst selector = 'div[style*=\"z-index: 3;\"]';\n\t\treturn this._map.getDiv().querySelector(selector) as HTMLDivElement;\n\t}\n\n\t/**\n\t * Converts longitude and latitude coordinates to pixel coordinates in the map container.\n\t * @param lng The longitude coordinate to project.\n\t * @param lat The latitude coordinate to project.\n\t * @returns An object with 'x' and 'y' properties representing the pixel coordinates within the map container.\n\t */\n\tproject(lng: number, lat: number) {\n\t\tif (!this._overlay) {\n\t\t\tthrow new Error(\"cannot get overlay\");\n\t\t}\n\n\t\tconst bounds = this._map.getBounds();\n\n\t\tif (bounds === undefined) {\n\t\t\tthrow new Error(\"cannot get bounds\");\n\t\t}\n\n\t\tconst projection = this._overlay.getProjection();\n\t\tif (projection === undefined) {\n\t\t\tthrow new Error(\"cannot get projection\");\n\t\t}\n\n\t\tconst point = projection.fromLatLngToContainerPixel(\n\t\t\tnew this._lib.LatLng(lat, lng),\n\t\t);\n\n\t\tif (point === null) {\n\t\t\tthrow new Error(\"cannot project coordinates\");\n\t\t}\n\n\t\treturn { x: point.x, y: point.y };\n\t}\n\n\t/**\n\t * Converts pixel coordinates in the map container to longitude and latitude coordinates.\n\t * @param x The x-coordinate in the map container to unproject.\n\t * @param y The y-coordinate in the map container to unproject.\n\t * @returns An object with 'lng' and 'lat' properties representing the longitude and latitude coordinates.\n\t */\n\tunproject(x: number, y: number) {\n\t\tif (!this._overlay) {\n\t\t\tthrow new Error(\"cannot get overlay\");\n\t\t}\n\n\t\tconst projection = this._overlay.getProjection();\n\t\tif (projection === undefined) {\n\t\t\tthrow new Error(\"cannot get projection\");\n\t\t}\n\n\t\tconst latLng = projection.fromContainerPixelToLatLng(\n\t\t\tnew this._lib.Point(x, y),\n\t\t);\n\n\t\tif (latLng === null) {\n\t\t\tthrow new Error(\"cannot unproject coordinates\");\n\t\t}\n\n\t\treturn { lng: latLng.lng(), lat: latLng.lat() };\n\t}\n\n\t/**\n\t * Sets the cursor style for the map container.\n\t * @param cursor The CSS cursor style to apply, or 'unset' to remove any previously applied cursor style.\n\t */\n\tsetCursor(cursor: Parameters<SetCursor>[0]) {\n\t\tif (cursor === this._cursor) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._cursorStyleSheet) {\n\t\t\tthis._cursorStyleSheet.remove();\n\t\t\tthis._cursorStyleSheet = undefined;\n\t\t}\n\n\t\tif (cursor !== \"unset\") {\n\t\t\t// TODO: We could cache these individually per cursor\n\n\t\t\tconst div = this._map.getDiv();\n\t\t\tconst styleDiv = div.querySelector(\".gm-style > div\");\n\n\t\t\tif (styleDiv) {\n\t\t\t\tstyleDiv.classList.add(\"terra-draw-google-maps\");\n\n\t\t\t\tconst style = document.createElement(\"style\");\n\t\t\t\tstyle.innerHTML = `.terra-draw-google-maps { cursor: ${cursor} !important; }`;\n\t\t\t\tdocument.getElementsByTagName(\"head\")[0].appendChild(style);\n\t\t\t\tthis._cursorStyleSheet = style;\n\t\t\t}\n\t\t}\n\n\t\tthis._cursor = cursor;\n\t}\n\n\t/**\n\t * Enables or disables the double-click to zoom functionality on the map.\n\t * @param enabled Set to true to enable double-click to zoom, or false to disable it.\n\t */\n\tsetDoubleClickToZoom(enabled: boolean) {\n\t\tif (enabled) {\n\t\t\tthis._map.setOptions({ disableDoubleClickZoom: false });\n\t\t} else {\n\t\t\tthis._map.setOptions({ disableDoubleClickZoom: true });\n\t\t}\n\t}\n\n\t/**\n\t * Enables or disables the draggable functionality of the map.\n\t * @param enabled Set to true to enable map dragging, or false to disable it.\n\t */\n\tsetDraggability(enabled: boolean) {\n\t\tthis._map.setOptions({ draggable: enabled });\n\t}\n\n\tprivate renderedFeatureIds: Set<TerraDrawExtend.FeatureId> = new Set();\n\n\t/**\n\t * Renders GeoJSON features on the map using the provided styling configuration.\n\t * @param changes An object containing arrays of created, updated, and unchanged features to render.\n\t * @param styling An object mapping draw modes to feature styling functions\n\t */\n\trender(changes: TerraDrawChanges, styling: TerraDrawStylingFunction) {\n\t\tif (this._layers) {\n\t\t\tchanges.deletedIds.forEach((deletedId) => {\n\t\t\t\tconst featureToDelete = this._map.data.getFeatureById(deletedId);\n\t\t\t\tif (featureToDelete) {\n\t\t\t\t\tthis._map.data.remove(featureToDelete);\n\t\t\t\t\tthis.renderedFeatureIds.delete(deletedId);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tchanges.updated.forEach((updatedFeature) => {\n\t\t\t\tif (!updatedFeature || !updatedFeature.id) {\n\t\t\t\t\tthrow new Error(\"Feature is not valid\");\n\t\t\t\t}\n\n\t\t\t\tconst featureToUpdate = this._map.data.getFeatureById(\n\t\t\t\t\tupdatedFeature.id,\n\t\t\t\t);\n\n\t\t\t\tif (!featureToUpdate) {\n\t\t\t\t\tthrow new Error(\"Feature could not be found by Google Maps API\");\n\t\t\t\t}\n\n\t\t\t\t// Remove all keys\n\t\t\t\tfeatureToUpdate.forEachProperty((property, name) => {\n\t\t\t\t\tfeatureToUpdate.setProperty(name, undefined);\n\t\t\t\t});\n\n\t\t\t\t// Update all keys\n\t\t\t\tObject.keys(updatedFeature.properties).forEach((property) => {\n\t\t\t\t\tfeatureToUpdate.setProperty(\n\t\t\t\t\t\tproperty,\n\t\t\t\t\t\tupdatedFeature.properties[property],\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tswitch (updatedFeature.geometry.type) {\n\t\t\t\t\tcase \"Point\":\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconst coordinates = updatedFeature.geometry.coordinates;\n\n\t\t\t\t\t\t\tfeatureToUpdate.setGeometry(\n\t\t\t\t\t\t\t\tnew this._lib.Data.Point(\n\t\t\t\t\t\t\t\t\tnew this._lib.LatLng(coordinates[1], coordinates[0]),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"LineString\":\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconst coordinates = updatedFeature.geometry.coordinates;\n\n\t\t\t\t\t\t\tconst path: google.maps.LatLng[] = [];\n\t\t\t\t\t\t\tfor (let i = 0; i < coordinates.length; i++) {\n\t\t\t\t\t\t\t\tconst coordinate = coordinates[i];\n\t\t\t\t\t\t\t\tconst latLng = new this._lib.LatLng(\n\t\t\t\t\t\t\t\t\tcoordinate[1],\n\t\t\t\t\t\t\t\t\tcoordinate[0],\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tpath.push(latLng);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfeatureToUpdate.setGeometry(new this._lib.Data.LineString(path));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Polygon\":\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconst coordinates = updatedFeature.geometry.coordinates;\n\n\t\t\t\t\t\t\tconst paths: google.maps.LatLng[][] = [];\n\t\t\t\t\t\t\tfor (let i = 0; i < coordinates.length; i++) {\n\t\t\t\t\t\t\t\tconst path: google.maps.LatLng[] = [];\n\t\t\t\t\t\t\t\tfor (let j = 0; j < coordinates[i].length; j++) {\n\t\t\t\t\t\t\t\t\tconst latLng = new this._lib.LatLng(\n\t\t\t\t\t\t\t\t\t\tcoordinates[i][j][1],\n\t\t\t\t\t\t\t\t\t\tcoordinates[i][j][0],\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tpath.push(latLng);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tpaths.push(path);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfeatureToUpdate.setGeometry(new this._lib.Data.Polygon(paths));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Create new features\n\t\t\tchanges.created.forEach((createdFeature) => {\n\t\t\t\tthis.renderedFeatureIds.add(createdFeature.id as string);\n\t\t\t\tthis._map.data.addGeoJson(createdFeature);\n\t\t\t});\n\t\t}\n\n\t\tchanges.created.forEach((feature) => {\n\t\t\tthis.renderedFeatureIds.add(feature.id as string);\n\t\t});\n\n\t\tconst featureCollection = {\n\t\t\ttype: \"FeatureCollection\",\n\t\t\tfeatures: [...changes.created],\n\t\t} as GeoJsonObject;\n\n\t\tthis._map.data.addGeoJson(featureCollection);\n\n\t\tthis._map.data.setStyle((feature) => {\n\t\t\tconst mode = feature.getProperty(\"mode\");\n\t\t\tconst gmGeometry = feature.getGeometry();\n\t\t\tif (!gmGeometry) {\n\t\t\t\tthrow new Error(\"Google Maps geometry not found\");\n\t\t\t}\n\t\t\tconst type = gmGeometry.getType();\n\t\t\tconst properties: Record<string, any> = {};\n\t\t\tconst id = feature.getId();\n\n\t\t\tfeature.forEachProperty((value, property) => {\n\t\t\t\tproperties[property] = value;\n\t\t\t});\n\n\t\t\tconst calculatedStyles = styling[mode]({\n\t\t\t\ttype: \"Feature\",\n\t\t\t\tid,\n\t\t\t\tgeometry: {\n\t\t\t\t\ttype: type as \"Point\" | \"LineString\" | \"Polygon\",\n\t\t\t\t\tcoordinates: [],\n\t\t\t\t},\n\t\t\t\tproperties,\n\t\t\t});\n\n\t\t\tswitch (type) {\n\t\t\t\tcase \"Point\":\n\t\t\t\t\tconst path = this.circlePath(0, 0, calculatedStyles.pointWidth);\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tclickable: false,\n\t\t\t\t\t\ticon: {\n\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\tfillColor: calculatedStyles.pointColor,\n\t\t\t\t\t\t\tfillOpacity: 1,\n\t\t\t\t\t\t\tstrokeColor: calculatedStyles.pointOutlineColor,\n\t\t\t\t\t\t\tstrokeWeight: calculatedStyles.pointOutlineWidth,\n\t\t\t\t\t\t\trotation: 0,\n\t\t\t\t\t\t\tscale: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tzIndex: calculatedStyles.zIndex,\n\t\t\t\t\t};\n\n\t\t\t\tcase \"LineString\":\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstrokeColor: calculatedStyles.lineStringColor,\n\t\t\t\t\t\tstrokeWeight: calculatedStyles.lineStringWidth,\n\t\t\t\t\t\tzIndex: calculatedStyles.zIndex,\n\t\t\t\t\t};\n\t\t\t\tcase \"Polygon\":\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstrokeColor: calculatedStyles.polygonOutlineColor,\n\t\t\t\t\t\tstrokeWeight: calculatedStyles.polygonOutlineWidth,\n\t\t\t\t\t\tfillOpacity: calculatedStyles.polygonFillOpacity,\n\t\t\t\t\t\tfillColor: calculatedStyles.polygonFillColor,\n\t\t\t\t\t\tzIndex: calculatedStyles.zIndex,\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\tthrow Error(\"Unknown feature type\");\n\t\t});\n\t}\n\n\tprivate clearLayers() {\n\t\tif (this._layers) {\n\t\t\tthis._map.data.forEach((feature) => {\n\t\t\t\tconst id = feature.getId() as string;\n\t\t\t\tconst hasFeature = this.renderedFeatureIds.has(id);\n\t\t\t\tif (hasFeature) {\n\t\t\t\t\tthis._map.data.remove(feature);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.renderedFeatureIds = new Set();\n\t\t}\n\t}\n\n\t/**\n\t * Clears the map and store of all rendered data layers\n\t * @returns void\n\t * */\n\tpublic clear() {\n\t\tif (this._currentModeCallbacks) {\n\t\t\t// Clean up state first\n\t\t\tthis._currentModeCallbacks.onClear();\n\n\t\t\t// Then clean up rendering\n\t\t\tthis.clearLayers();\n\t\t}\n\t}\n\n\tpublic getCoordinatePrecision(): number {\n\t\t// TODO: It seems this shouldn't be necessary as extends BaseAdapter which as this method\n\t\treturn super.getCoordinatePrecision();\n\t}\n}\n"],"names":["TerraDrawGoogleMapsAdapter","_TerraDrawExtend$Terr","config","_this","call","this","_cursor","_cursorStyleSheet","_lib","_map","_overlay","_clickEventListener","_mouseMoveEventListener","_readyCalled","renderedFeatureIds","Set","lib","map","_coordinatePrecision","coordinatePrecision","_proto","prototype","circlePath","cx","cy","r","d","register","callbacks","_this2","OverlayView","draw","onAdd","_this2$_currentModeCa","_currentModeCallbacks","onReady","setMap","onRemove","data","addListener","event","clickListener","_listeners","find","_ref","name","callback","mouseMoveListener","_ref2","unregister","_this$_clickEventList","_this$_mouseMoveEvent","remove","getMap","undefined","getLngLatFromEvent","Error","bounds","getBounds","ne","getNorthEast","sw","getSouthWest","latLngBounds","LatLngBounds","mapCanvas","getDiv","offsetX","clientX","getBoundingClientRect","left","offsetY","clientY","top","screenCoord","Point","projection","getProjection","latLng","fromContainerPixelToLatLng","contains","lng","lat","getMapEventElement","querySelector","project","point","fromLatLngToContainerPixel","LatLng","x","y","unproject","setCursor","cursor","styleDiv","classList","add","style","document","createElement","innerHTML","getElementsByTagName","appendChild","setDoubleClickToZoom","enabled","setOptions","disableDoubleClickZoom","setDraggability","draggable","render","changes","styling","_this3","_layers","deletedIds","forEach","deletedId","featureToDelete","getFeatureById","updated","updatedFeature","id","featureToUpdate","forEachProperty","property","setProperty","Object","keys","properties","geometry","type","coordinates","setGeometry","Data","path","i","length","coordinate","push","LineString","paths","j","Polygon","created","createdFeature","addGeoJson","feature","featureCollection","features","concat","setStyle","mode","getProperty","gmGeometry","getGeometry","getType","getId","value","calculatedStyles","clickable","icon","pointWidth","fillColor","pointColor","fillOpacity","strokeColor","pointOutlineColor","strokeWeight","pointOutlineWidth","rotation","scale","zIndex","lineStringColor","lineStringWidth","polygonOutlineColor","polygonOutlineWidth","polygonFillOpacity","polygonFillColor","clearLayers","_this4","has","clear","onClear","getCoordinatePrecision","key","get","_this$renderedFeature","Boolean","size","TerraDrawExtend","TerraDrawBaseAdapter"],"mappings":"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"}